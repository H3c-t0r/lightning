# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - "master"
      - "release/*"
      - "refs/tags/*"

pr:
  - "master"
  - "release/*"

variables:
  # variables are automatically exported as environment variables so this will override pip's default cache dir
  - name: pip_cache_dir
    value: $(Pipeline.Workspace)/.pip

jobs:
  - job: App_cloud_e2e_testing
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: "30"
    cancelTimeoutInMinutes: "2"
    strategy:
      matrix:
        'App: v0_app':
          repo: "v0_app"
        'App: boring_app':
          repo: "boring_app"
        'App: template_streamlit_ui':
          repo: "template_streamlit_ui"
        'App: template_react_ui':
          repo: "template_react_ui"
        'App: template_jupyterlab':
          repo: "template_jupyterlab"
        'App: idle_timeout':
          repo: "idle_timeout"
        'App: collect_failures':
          repo: "collect_failures"
        'App: custom_work_dependencies':
          repo: "custom_work_dependencies"
        'App: drive':
          repo: "drive"
        'App: payload':
          repo: "payload"
        'App: commands_and_api':
          repo: "commands_and_api"
    workspace:
      clean: all
    steps:
    - task: UsePythonVersion@0
      inputs:
        versi`onSpec: '3.8'

    # TODO: parse the PR number

    - task: Cache@2
      inputs:
        key: 'pip | "$(repo)" | requirements/app/base.txt'
        restoreKeys: |
          pip | "$(Agent.OS)"
        path: $(pip_cache_dir)
      displayName: Cache pip

    - bash: |
        python --version
        pip --version
      displayName: 'Info'

    - bash: python -m pip install -r requirements/app/devel.txt --no-cache --quiet --find-links https://download.pytorch.org/whl/cpu/torch_stable.html
      displayName: 'Install dependencies'

    - bash: |
        python -m pip install playwright
        python -m playwright install --with-deps
      displayName: 'Install Playwright system dependencies'

    - bash: pip install -e .
      displayName: 'Install lightning'

#    - checkout: git://MyProject/MyToolsRepo@features/mytools  # TODO: Lightning-AI/lightning-template-react
#      path: examples/app_template_react_ui
#      displayName: 'Clone Template React UI Repo'

#    - checkout: git://MyProject/MyToolsRepo@features/mytools  # TODO: Lightning-AI/lightning-template-jupyterlab
#      path: examples/app_template_jupyterlab
#      displayName: 'Clone Template Jupyter Lab Repo'

#    - bash: cp examples/app_template_jupyterlab/tests/test_template_jupyterlab.py tests/tests_app_examples/test_template_jupyterlab.py
#      displayName: 'Copy Template Jupyter Lab Repo tests'

    - bash: |
        mkdir -p ${VIDEO_LOCATION}
        ls -l tests/tests_app_examples
        python -m pytest tests/tests_app_examples/test_${TEST_APP_NAME}.py::test_${TEST_APP_NAME}_example_cloud --timeout=900 --capture=no -v --color=yes
      env:
        HEADLESS: "1"
        PACKAGE_LIGHTNING: "1"
        CLOUD: "1"
        VIDEO_LOCATION: ./artifacts/videos
        PR_NUMBER: $(date +%s)  # TODO: use PR number
        TEST_APP_NAME: $(repo)
        HAR_LOCATION: ./artifacts/hars
        SLOW_MO: 50
        LAI_USER: $(LAI_USER)
        LAI_PASS: $(LAI_PASS)
        LIGHTNING_USER_ID: $(LIGHTNING_USER_ID)
        LIGHTNING_API_KEY: $(LIGHTNING_API_KEY)
        LIGHTNING_USERNAME: $(LIGHTNING_USERNAME)
        LIGHTNING_CLOUD_URL: $(LIGHTNING_CLOUD_URL)
      workingDirectory: tests/tests_pytorch
      displayName: 'Run the tests'

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testResultsFiles: '$(Build.StagingDirectory)/artifacts/videos'
        testRunTitle: 'App $(repo)'

    # TODO: Clean Previous Apps
