# These settings are synced to GitHub by https://probot.github.io/apps/settings/

repository:
  # See https://docs.github.com/en/rest/reference/repos#update-a-repository for all available settings.

  # The name of the repository. Changing this will rename the repository
  name: pytorch-lightning

  # A short description of the repository that will show up on GitHub
  description: The lightweight PyTorch wrapper for high-performance AI research. Scale your models, not the boilerplate.

  # A URL with more information about the repository
  homepage: pytorchlightning.ai

  # A comma-separated list of topics to set on the repository
  topics: python,data-science,machine-learning,ai,deep-learning,pytorch,artificial-intelligence

  # Either `true` to make the repository private, or `false` to make it public.
  private: false

  # Either `true` to enable issues for this repository, `false` to disable them.
  has_issues: true

  # Either `true` to enable projects for this repository, or `false` to disable them.
  # If projects are disabled for the organization, passing `true` will cause an API error.
  has_projects: true

  # Either `true` to enable the wiki for this repository, `false` to disable it.
  has_wiki: false

  # Either `true` to enable downloads for this repository, `false` to disable them.
  has_downloads: true

  # Updates the default branch for this repository.
  default_branch: master

  # Either `true` to allow squash-merging pull requests, or `false` to prevent
  # squash-merging.
  allow_squash_merge: true

  # Either `true` to allow merging pull requests with a merge commit, or `false`
  # to prevent merging pull requests with merge commits.
  allow_merge_commit: false

  # Either `true` to allow rebase-merging pull requests, or `false` to prevent
  # rebase-merging.
  allow_rebase_merge: true

  # Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge
  allow_auto_merge: true

  # Either `true` to enable automatic deletion of branches on merge, or `false` to disable
  delete_branch_on_merge: true

  # Either `true` to enable automated security fixes, or `false` to disable
  # automated security fixes.
  enable_automated_security_fixes: true

  # Either `true` to enable vulnerability alerts, or `false` to disable
  # vulnerability alerts.
  enable_vulnerability_alerts: true

  # Either `true` to make this repo available as a template repository or `false` to prevent it.
  is_template: false

  # Note: You cannot unarchive repositories through the API. `true` to archive this repository.
  archived: false

  # Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The visibility parameter overrides the private parameter when you use both along with the nebula-preview preview header
  visibility: public

# Labels: define labels for Issues and Pull Requests
labels:
  - name: "_admin"
    color: "#C94E63"
    description: "Requires admin privileges to merge"
  - name: "0:] Ready-To-Go"
    color: "#66ff00"
    description: "issues/PRs prepared for final check"
  - name: "3rd-party"
    color: "#d2c4ff"
    description: "integration / issue of 3rd-party lib"
  - name: "API / design"
    color: "#7b6bd3"
  - name: "breaking change"
    color: "#F01A04"
  - name: "bug / fix"
    color: "#d73a4a"
    description: "Something isn't working"
  - name: "callbacks"
    color: "#006b75"
  - name: "checkpoint"
    color: "#80c0ce"
    description: "checkpointing infrastructure"
  - name: "CLI"
    color: "#5319e7"
    description: "argument parsing related (LightningCLI, argparse, Hydra, ...)"
  - name: "data / DataModule"
    color: "#d38a45"
  - name: "DDP"
    color: "#33cc77"
    description: "distributed communication"
  - name: "deepspeed"
    color: "#F26D6F"
  - name: "deprecation"
    color: "#c2e0c6"
  - name: "discussion"
    color: "#f29579"
    description: "Open discussion -> towards a conclusion"
  - name: "documentation"
    color: "#0075ca"
    description: "Improvements or additions to documentation"
  - name: "DP"
    color: "#edfcab"
    description: "data parallel plugin"
  - name: "duplicate"
    color: "#cfd3d7"
    description: "This issue or pull request already exists"
  - name: "enhancement"
    color: "#a2eeef"
    description: "New feature or request"
  - name: "Epic"
    color: "#DE46A5"
  - name: "fault tolerance"
    color: "#288CA7"
  - name: "good first issue"
    color: "#9108E7"
    description: "Good for newcomers"
  - name: "Hacktoberfest"
    color: "#8604f7"
  - name: "has conflicts"
    color: "#42205D"
  - name: "help wanted"
    color: "#008672"
    description: "Open to be worked on"
  - name: "horovod"
    color: "#EF5F08"
  - name: "Important"
    color: "#FFD700"
    description: "High important task, global impact"
  - name: "information needed"
    color: "#730042"
    description: "need more information about this"
  - name: "IPU"
    color: "#5971E5"
  - name: "let's do it!"
    color: "#12d1b1"
    description: "approved to implement"
  - name: "lite"
    color: "#D73128"

# Milestones: define milestones for Issues and Pull Requests
milestones:
  - title: 1.5.x
    # description: milestone-description
    # The state of the milestone. Either `open` or `closed`
    state: open
  - title: 1.6
    state: open
  - title: 1.7
    state: open

# Collaborators: give specific users access to this repository.
# See https://docs.github.com/en/rest/reference/repos#add-a-repository-collaborator for available options
# FIXME
collaborators:
  # - username: bkeepers
  #   permission: push
  # - username: hubot
  #   permission: pull

  # Note: `permission` is only valid on organization-owned repositories.
  # The permission to grant the collaborator. Can be one of:
  # * `pull` - can pull, but not push to or administer this repository.
  # * `push` - can pull and push, but not administer this repository.
  # * `admin` - can pull, push and administer this repository.
  # * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
  # * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.

# See https://docs.github.com/en/rest/reference/teams#add-or-update-team-repository-permissions for available options
# FIXME
teams:
  - name: core
    # The permission to grant the team. Can be one of:
    # * `pull` - can pull, but not push to or administer this repository.
    # * `push` - can pull and push, but not administer this repository.
    # * `admin` - can pull, push and administer this repository.
    # * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
    # * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
    permission: admin
  - name: docs
    permission: push

branches:
  - name: master
    # https://docs.github.com/en/rest/reference/repos#update-branch-protection
    # Branch Protection settings. Set to null to disable
    protection:
      # Required. Require at least one approving review on a pull request, before merging. Set to null to disable.
      required_pull_request_reviews:
        # The number of approvals required. (1-6)
        required_approving_review_count: 3
        # Dismiss approved reviews automatically when a new commit is pushed.
        dismiss_stale_reviews: false
        # Blocks merge until code owners have reviewed.
        require_code_owner_reviews: true
        # Specify which users and teams can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for organization-owned repositories. Omit this parameter for personal repositories.
        # FIXME
        dismissal_restrictions:
          users: []
          teams: []
      # Required. Require status checks to pass before merging. Set to null to disable
      required_status_checks:
        # Required. Require branches to be up to date before merging.
        strict: false
        # Required. The list of status checks to require in order to merge into this branch
        contexts:
          - "Milestone Check"
          - "WIP"
          - "Python typing Mypy"
          - "pre-commit.ci - pr"
          - "make-docs"
          - "test-docs"
          - "doctest (ubuntu-20.04, 3.9)"
          - "PL.pytorch-lightning (GPUs)"
          - "PL.pytorch-lightning (IPUs)"
          - "ci-tests"
          - "conda (3.8, 1.10)"
          - "conda (3.8, 1.9)"
          #- "conda (3.8, 1.8)"
          - "conda (3.8, 1.7)"
          - "pytest (windows-2019, 3.9, oldest, stable)"
          - "pytest (windows-2019, 3.9, latest, stable)"
          #- "pytest (windows-2019, 3.7, oldest, stable)"
          #- "pytest (windows-2019, 3.7, latest, stable)"
          - "pytest (windows-2019, 3.6, oldest, stable)"
          - "pytest (ubuntu-18.04, 3.9, oldest, stable)"
          - "pytest (ubuntu-18.04, 3.9, latest, stable)"
          #- "pytest (ubuntu-18.04, 3.7, oldest, stable)"
          #- "pytest (ubuntu-18.04, 3.7, latest, stable)"
          - "pytest (ubuntu-18.04, 3.6, oldest, stable)"
          - "pytest (macOS-10.15, 3.9, oldest, stable)"
          - "pytest (macOS-10.15, 3.9, latest, stable)"
          #- "pytest (macOS-10.15, 3.7, oldest, stable)"
          #- "pytest (macOS-10.15, 3.7, latest, stable)"
          - "pytest (macOS-10.15, 3.6, oldest, stable)"
      # Required. Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable.
      enforce_admins: true
      # Prevent merge commits from being pushed to matching branches
      required_linear_history: false
      # Required. Restrict who can push to this branch. Team and user restrictions are only available for organization-owned repositories. Set to null to disable.
      restrictions:
        apps: null
        users: null
        teams: null
      # Permits force pushes for all users with push access. Set to null to disable.
      allow_force_pushes: true
      # Allows users with push access to delete matching branches. Set to `false` to disable.
      allow_deletions: true
      # Ensure all review conversations are seen and addressed prior to merging
      required_conversation_resolution: true
