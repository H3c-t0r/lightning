name: PyPI

# https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:
  push:
    branches: [master, "release/*"]
  release:
    types: [published]

# there are several consecutive actions:
# 1) determine which packages have been change at the time this event is processed
# 2) build related packages - app/pytorch or download latest from pypi
# 3) create the meta package - lightning
# 4) publish all new creations tada

jobs:
  # run job which determine changed versions
  init:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - run: |
        mkdir dist && touch dist/.placeholder
    - uses: actions/upload-artifact@v3
      with:
        name: dist-packages-${{ github.sha }}
        path: dist

  # based on https://github.com/pypa/gh-action-pypi-publish
  build-packages:
    needs: init
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      # run sequential
      max-parallel: 1
      matrix:
        pkg-name: ["", "app", "lite", "pytorch"]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: dist-packages-${{ github.sha }}
        path: dist
    - uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: pip install -U setuptools wheel

    - name: Build packages
      env:
        PACKAGE_NAME: ${{ matrix.pkg-name }}
      run: |
        python setup.py sdist bdist_wheel
        ls -lh dist/

    - uses: actions/upload-artifact@v3
      with:
        name: dist-packages-${{ github.sha }}
        path: dist

  upload-packages:
    runs-on: ubuntu-20.04
    needs: build-packages
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: dist-packages-${{ github.sha }}
        path: dist
    - run: ls -lh dist/
    - name: Upload to release
      uses: AButler/upload-release-assets@v2.0
      with:
        files: 'dist/*'
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  publish-packages:
    runs-on: ubuntu-20.04
    needs: build-packages
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: dist-packages-${{ github.sha }}
        path: dist
    - run: ls -lh dist/
    - run: mkdir pypi/

    - name: Delay releasing
      uses: juliangruber/sleep-action@v1
      with:
        time: 10m

    - uses: ./.github/actions/pkg-publish
      with:
        pkg-pattern: "*app*"
        pypi-token: ${{ secrets.PYPI_TOKEN_APP }}

    - uses: ./.github/actions/pkg-publish
      with:
        pkg-pattern: "*lite*"
        pypi-token: ${{ secrets.PYPI_TOKEN_LITE }}

    - uses: ./.github/actions/pkg-publish
      with:
        pkg-pattern: "*pytorch*"
        pypi-token: ${{ secrets.PYPI_TOKEN_PYTORCH }}

    - uses: ./.github/actions/pkg-publish
      with:
        pkg-pattern: "*"
        pypi-token: ${{ secrets.PYPI_TOKEN_LAI }}

  create-legacy-ckpt:
    # Todo: skip if pytorch was not released
    runs-on: ubuntu-20.04
    needs: publish-packages
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
        aws-region: us-east-1

    - name: Pull files from S3
      working-directory: ./tests/legacy
      run: |
        pip install awscli --quiet
        aws s3 cp --recursive s3://pl-public-data/legacy/checkpoints/ checkpoints/ #  --acl public-read
        ls -l checkpoints/

    - name: Generate checkpoint
      working-directory: ./tests/legacy
      run: |
        pip install pytorch-lightning -U
        pl_ver=$(python -c "import pytorch_lightning as pl ; print(pl.__version__)" 2>&1)
        # generate checkpoint to this version
        bash generate_checkpoints.sh $pl_ver

    - name: Push files to S3
      working-directory: ./tests/legacy
      run: |
        aws s3 sync checkpoints/ s3://pl-public-data/legacy/checkpoints/
        zip -r checkpoints.zip checkpoints
        aws s3 cp checkpoints.zip s3://pl-public-data/legacy/ --acl public-read
