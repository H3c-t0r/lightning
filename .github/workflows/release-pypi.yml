name: PyPI

# https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:
  push: {}  # FIXME
#    branches: [master, "release/*"]
  release:
    types: [published]

defaults:
  run:
    shell: bash

jobs:
  init:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - run: |
        mkdir dist && touch dist/.placeholder
    - uses: actions/upload-artifact@v3
      with:
        name: dist-packages-${{ github.sha }}
        path: dist

  build-packages:
    needs: init
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      max-parallel: 1  # run sequential to prevent download/upload collisions
      matrix:
        pkg-name: ["lightning", "app", "lite", "pytorch"]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: dist-packages-${{ github.sha }}
        path: dist
    - uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: pip install -U setuptools wheel

    - name: Build packages
      env:
        PACKAGE_NAME: ${{ matrix.pkg-name }}
      run: |
        python setup.py sdist bdist_wheel
        ls -lh dist/

    - uses: actions/upload-artifact@v3
      with:
        name: dist-packages-${{ github.sha }}
        path: dist

  upload-packages:
    runs-on: ubuntu-20.04
    needs: build-packages
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: dist-packages-${{ github.sha }}
        path: dist
    - run: ls -lh dist/
    - name: Upload to release
      uses: AButler/upload-release-assets@v2.0
      with:
        files: 'dist/*'
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  release-version:
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ steps.lai-package.outputs.version }}
    steps:
    - uses: actions/checkout@v3
    - name: install Package
      env:
        PACKAGE_NAME: "lightning"
      run: pip install . -f https://download.pytorch.org/whl/cpu/torch_stable.html
    - name: package Version
      id: lai-package
      run: python -c "import lightning as L; print(f'version={L.__version__}')" >> $GITHUB_OUTPUT

  signaling:
    runs-on: ubuntu-20.04
    needs: [release-version, upload-packages]
    env:
      TAG: ${{ needs.release-version.outputs.tag }}
    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - uses: actions/checkout@v3
      with:
        repository: gridai/base-images
        token: ${{ secrets.PAT_GHOST }}
        ref: master  # FIXME
    - uses: fregante/setup-git-token@v1
      with:
        token: ${{ secrets.PAT_GHOST }}
        name: PL Ghost
        email: pl-github@grid.ai
    - name: Update lightning version
      run: |
        import json, os
        with open("versions.json") as fo:
            vers = json.load(fo)
        vers["lightning_version"] = os.getenv('TAG')
        with open("versions.json", "w") as fw:
            json.dump(vers, fw)
      shell: python
    - name: GIT Commit
      run: |
        git add versions.json
        git commit -m "bumping lightning version -> ${TAG}"
        cat versions.json
    - name: GIT Push
      run: |
        git status
        git push

  waiting:
    runs-on: ubuntu-20.04
    needs: build-packages
    steps:
    - name: Delay releasing
      uses: juliangruber/sleep-action@v1
      with:
        time: 30m

  publish-packages:
    runs-on: ubuntu-20.04
    needs: [waiting, signaling]
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: dist-packages-${{ github.sha }}
        path: dist
    - run: ls -lh dist/
    - run: mkdir pypi/

    - uses: ./.github/actions/pkg-publish
      with:
        pkg-pattern: "*app*"
        pypi-token: ${{ secrets.PYPI_TOKEN_APP }}
    - uses: ./.github/actions/pkg-publish
      with:
        pkg-pattern: "*lite*"
        pypi-token: ${{ secrets.PYPI_TOKEN_LITE }}
    - uses: ./.github/actions/pkg-publish
      with:
        pkg-pattern: "*pytorch*"
        pypi-token: ${{ secrets.PYPI_TOKEN_PYTORCH }}
    - uses: ./.github/actions/pkg-publish
      with:
        pkg-pattern: "*"
        pypi-token: ${{ secrets.PYPI_TOKEN_LAI }}

  legacy-checkpoints:
    needs: publish-packages
    uses: ./.github/workflows/legacy-checkpoints.yml
    with:
      push_to_s3: true
      create_pr: true
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_KEY_ID: ${{ secrets.AWS_SECRET_KEY_ID }}
